#!{{ bash_path|default('/bin/bash') }}

export log_tag="backup-for-{{ backup_client_user }}"
export log_file="{{ log_dir|default('/var/log') }}/${log_tag}.log"
export old_log_file="{{ log_dir|default('/var/log') }}/${log_tag}.old.log"
export ret_file="{{ log_dir|default('/var/log') }}/${log_tag}.ret"
export lock_file="{{ log_dir|default('/var/log') }}/${log_tag}.pid"
export log_failure="{{ log_dir|default('/var/log') }}/${log_tag}.failure.log"


function log() {
  echo "${1}" >> "${log_failure}"
}


# flock must have a command argument.  Inspect `man flock`, SYNOPSIS.
if ! flock -n "${lock_file}" -c '
  echo $$ > "${lock_file}"
  ps -lfp $$ >> "${lock_file}"
  cat > "${old_log_file}" < "${log_file}"
  {{ bin_dir|default('/usr/local/bin') }}/backup-for-{{ backup_client_user }} > "${log_file}" 2>&1
  echo "${?}" > "${ret_file}"
'; then
  ret="${?}"
  log "Lock failure:  '${ret}'"
  log "Lock held by PID:  $(
    head -n 1 "${lock_file}"
  )"
  log "$(
    tail -n 1 "${lock_file}"
  )"
  exit "${ret}"
fi

# Removing the lock file, before or after unlocking, breaks flock's
# expectations.  Just leave it.
